class Calendar{ //입력한 달에 월요일~일요일이 각 몇번 있는지를 나타내는 클래스
	Scanner sc = new Scanner(System.in);
	int[] days = new int[12];
	int year, month, monthDay;
	int[] SEVEN = new int[7];
	String first_day;
	public void input() {
		System.out.println("년을 입력하세요.");
		year= sc.nextInt();
		while(true) {
			if(year <1 || year >9999) {
				System.out.println("잘못된 숫자를 입력했습니다. 다시 입력해주세요");
				year =sc.nextInt();
			}
			else {
				break;
			}
		}
		
		System.out.println("월을 입력하세요");
		month = sc.nextInt();		
		while(true) {
			if(month <1 || month >12) {
				System.out.println("잘못된 숫자를 입력했습니다. 다시 입력해주세요");
				month =sc.nextInt();
			}
			else {
				break;
			}
		}
		
		System.out.println("시작 요일을 입력하세요");
		first_day = sc.next();
	}
	public void leapYear() { //윤년 검사 
		if( year % 4==0) {
			days = new int[] {31,29,31,30,31,30,31,31,30,31,30,31};
		}else { 
			days = new int[] {31,28,31,30,31,30,31,31,30,31,30,31};
		}
		for(int i=0; i<SEVEN.length; i++) {
			SEVEN[i] = 4;
		}
	} 
	// 월요일이라고 입력했으면 그 달의 월요일이 총 몇개인지 나타내주는 메소드들
}
class StartDayFunction extends Calendar{
	int[] dayCount = {0,0,0,0,0,0,0};
	int share; //몫
	int remainder; //나머지
	int startDayInput =0;
	int endDayInput =0;
	public void startMon() {
		if(first_day.equals("월")) { // .equal() 안쓰면 비교 불가 이유 -깃허브에 올림
			if(monthDay == 31) {
			for(int i=0; i<3; i++) {
				 SEVEN[i] +=1;
			}
			if(monthDay == 30) {
				for(int j =0; j<2 ; j++) {
					SEVEN[j] +=1;		
				}
			}
			}
		}
	}
	public void startTue() {
		if(first_day.equals("화")) {
			if(monthDay == 31) {
			for(int i = 1; i < 4; i++) {
				 SEVEN[i] +=1;
			}
			if(monthDay == 30) {
				for(int j =1; j<3; j++) {
					SEVEN[j] +=1;
				}
			}
			}
		}
	}
	public void startWed() {
		if(first_day.equals("수")) {
			if(monthDay == 31) {
			for(int i = 2; i<5; i++) {
				 SEVEN[i] +=1;
			}
			if(monthDay == 30) {
				for(int j =2; j<4; j++) {
					SEVEN[j] +=1;
				}
			}
			}
		}
	}
	public void startThur() {
		if(first_day.equals("목")) {
			if(monthDay==31) {
			for(int i=3; i<6; i++) {
				 SEVEN[i] +=1;
			}
			if(monthDay == 30) {
				for(int j=3; j<5; j++) {
					SEVEN[j] +=1;
				}
			}
			}
		}
	}
	public void startFri() {
		if(first_day.equals("금")) {
			if(monthDay==31) {
			for(int i=4; i<7; i++) {
				 SEVEN[i] +=1;
			}
			if(monthDay==30) {
				for(int j=4; j<6; j++) {
					SEVEN[j] +=1;
				}
			}
			}
		}
	}
	public void startSat() {
	if(first_day.equals("토")) {
			if(monthDay==31) {
			for(int i=5; i<7; i++) {
				 SEVEN[i]+=1;
			}
				SEVEN[0] += 1 ;
			}
			if(monthDay==30) {
				for(int j =5; j<7; j++) {
					SEVEN[j]+=1;
				}
			}
		}
	}
	public void startSun() {

		if(first_day.equals("일")) {
			if(monthDay==31) {
				SEVEN[6] +=1;
				SEVEN[0] +=1;
				SEVEN[1] +=1;
			if(monthDay==30) {
				SEVEN[6] +=1;
				SEVEN[0] +=1;
			}	
			}
		}
	}
 
 
	public void startFind() {

		monthDay = days[month-1];
		if(first_day.equals("월"))	{
		startMon();
		}else if(first_day.equals("화"))	{
		startTue();
		}else if(first_day.equals("수"))	{
		startWed();
		}else if(first_day.equals("목"))	{
		startThur();
		}else if(first_day.equals("금"))	{
		startFri();
		}else if(first_day.equals("토"))	{
		startSat();
		}else if(first_day.equals("일"))	{
			startSun();
			}
		
	
	}
} 
class EndDayFunction extends StartDayFunction{

	public void  endMon() {
		if(first_day.equals("월")) {
			for(int i=0; i<remainder; i++) {
				dayCount[i]+=1;
			}
		 }
	}
	public void  endTue() {
		if(first_day.equals("화")) {
			for(int i=1; i<remainder; i++) {
				dayCount[i]+=1;
			}		 
	 }
	}
	public void  endWed() {
		 if(first_day.equals("수")) {
				for(int i = 2; i < 7 ; i++){
					if( remainder == i){
					   	for(int j = 2; j < i+1; j++){
					   	dayCount[j] +=1;
					   }
					}
				}
		}
	}
	public void  endThur() {
		 if(first_day.equals("목")) {
			  if(remainder == 6) {
				 for(int i = 3; i<dayCount.length; i++) {
					 dayCount[i] +=1;
				 } // 3 4 5 6  + 0
				 dayCount[0] +=1;
				 dayCount[1]+=1;
				 dayCount[2]+=1;
		 }
		 for(int i = 2; i<5; i++) {
			 if( remainder == i) {
				 for(int j =3; j< i+2; j++) {
					 dayCount[j] +=1;
				 }
			 }
		 }
		 }
	}
	public void  endFri() {
		if(first_day.equals("금")) {
			if(remainder == 4) {
				 for(int i = 4; i<dayCount.length; i++) {
					 dayCount[i] +=1;
				 }
				 dayCount[0]+=1;
			 }
			if(remainder == 5) {
				 for(int i = 4; i<dayCount.length; i++) {
					 dayCount[i] +=1;
				 }
				 dayCount[0]+=1;
				 dayCount[1]+=1;
			 } if(remainder == 6) {
				 for(int i = 4; i<dayCount.length; i++) {
					 dayCount[i] +=1;
				 }
				 dayCount[0] +=1;
				 dayCount[1] +=1;
				 dayCount[2]+=1;
			 }
		 for(int i = 2; i<4; i++) {
			 if( remainder == i) {
				 for(int j =4; j< i+3; j++) {
					 dayCount[j] +=1;
				 }
			 }
		 }
		}
	}
	public void  endSat() {
			 if(remainder ==2) {
				 dayCount[5] +=1;
				 dayCount[6] +=1;
			 } else if(remainder ==3) {
				 for(int i = 5; i<dayCount.length; i++) {
					 dayCount[i] +=1;
				 }
				 dayCount[0] +=1;
			 }
			for(int i = 4; i<7; i++) {
					  if(remainder == i) { //
						 for(int j = 5; j< dayCount.length; j++) {
							 dayCount[j] +=1;
						 }
						 for(int k = 0; k< i-2; k++) {
							 dayCount[k] +=1;
						 		} 
					  }
		 }
		 
	}
	public void  endSun() {
		 if(first_day.equals("일")) {
		for(int j = 2; j<7; j++) {
			if(remainder ==j) {
				dayCount[6] +=1;
			for(int k = 0; k< j-1; k++) {
				dayCount[k] +=1;
							}
						}
					}
		 		}
	}
	public void  endFind() {
		share = endDayInput /7;
		 remainder = (endDayInput % 7);
		 for(int i=0; i<dayCount.length; i++) {
			dayCount[i]+=share; 
		 }
		 if(first_day.equals("월")) {
			 endMon();
		 }else if(first_day.equals("화")) {
			 endTue();
		 }else if(first_day.equals("수")) {
			 endWed();
		 }else if(first_day.equals("목")) {
			 endThur();
		 }else if(first_day.equals("금")) {
			 endFri();
		 }else if(first_day.equals("토")) {
			 endSat();
		 }else if(first_day.equals("일")) {
			 endSun();
		 }
	}

}
class PayCalculation extends EndDayFunction{
	static int pay = 9160;
	int mon=0, tue=0, wed=0,thur=0,fri=0,sat=0,sun=0;
	int mon_result=0, tue_result=0, wed_result=0,
			thur_result=0, fri_result=0, sat_result=0, sun_result=0 ;  
	int monStart=0,tueStart=0,wedStart=0,
			thurStart=0,friStart=0,satStart=0,sunStart=0;
	public void startDayConcept() {
		monStart = SEVEN[0] - dayCount[0];
		tueStart = SEVEN[1] - dayCount[1];
		wedStart = SEVEN[2] - dayCount[2];
		thurStart = SEVEN[3] - dayCount[3];
		friStart = SEVEN[4] - dayCount[4];
		satStart = SEVEN[5] - dayCount[5];
		sunStart = SEVEN[6] - dayCount[6];
	}
	public void startDayPayCalculate() {
		mon_result = mon*monStart*pay;
		tue_result = tue*tueStart*pay;
		wed_result = wed*wedStart*pay;
		thur_result = thur*thurStart*pay;
		fri_result = fri*friStart*pay;
		sat_result = sat*satStart*pay;
		sun_result = sun*sunStart*pay;
	}
	public void payCalculate() {
		mon_result = mon*SEVEN[0]*pay;
		tue_result = tue*SEVEN[1]*pay;
		wed_result = wed*SEVEN[2]*pay;
		thur_result = thur*SEVEN[3]*pay;
		fri_result = fri*SEVEN[4]*pay;
		sat_result = sat*SEVEN[5]*pay;
		sun_result = sun*SEVEN[6]*pay;
	}
	public void endDayPayCalculate() {
	mon_result = mon * dayCount[0] * pay;
	tue_result = tue * dayCount[1] * pay;
	wed_result = wed * dayCount[2] * pay;
	thur_result = thur * dayCount[3] * pay;
	fri_result = fri * dayCount[4] * pay;
	sat_result = sat * dayCount[5] * pay;
	sun_result = sun * dayCount[6] * pay;
	
	}
}

class Option extends PayCalculation{
	Scanner sc = new Scanner(System.in);
	String plusMinus;
	int result=0;
	int plusTime, minusTime;
	int plusPay=0, minusPay=0;
	public void plusPay() {
		System.out.println("추가근무 시간을 입력해주세요");
		plusTime = sc.nextInt();
		plusPay = plusTime*pay;
	}
	public void minusPay() {
		System.out.println("근무감소 시간을 입력해주세요");
		minusTime = sc.nextInt();
		minusPay = minusTime*pay;
		
	}
	public void discrimin() {
		System.out.println("추가근무가 있으면 '추가', 근무 감소가 있다면 '감소', 없다면 0을 입력해주세요.");
		plusMinus = sc.next();
		if(plusMinus.equals("추가")) {
			plusPay();
			System.out.println("급여는" +(result +plusPay) +"입니다.");
		}
		else if(plusMinus.equals("감소")) {
			minusPay();
			System.out.println("급여는" +(result -minusPay) +"입니다.");
		}
		else if(plusMinus.equals("0")) {
			System.out.println("급여는" +result+"입니다.");
		}
	}
}
class Worker extends Option{
	Scanner sc = new Scanner(System.in);
	public void Jung_yun() {
	 mon = 4;
	 tue = 4;
	 wed = 3;
	 thur = 3;
		System.out.println("정연의 근무시작일을 입력해주세요");
		//startDayInput = sc.nextInt() ;
		endDayInput = sc.nextInt();
		if(endDayInput == 13) {
			endFind();
			endDayPayCalculate();
			result = mon_result + tue_result + wed_result+ thur_result;
			discrimin();
		}
		System.out.println(dayCount[0]);
		System.out.println(dayCount[1]);
		System.out.println(dayCount[2]);
		System.out.println(dayCount[3]);
		
		System.out.println(share);
		System.out.println(remainder);
		/*if(startDayInput > 1) {
			endFind();
			startDayConcept();
			//총결과
			startDayPayCalculate();
			result = mon_result + tue_result + wed_result+ thur_result;
			for(int i = 0; i< 7 ; i++) {
				dayCount[i] = 0;
			} //배열값을 다시 초기화시켜줘야함.
		} else{
			payCalculate();
			result = mon_result + tue_result + wed_result+ thur_result;
			}
		discrimin();*/
	} 
	public void Hee_jun() {
		mon = 5;
		tue = 5;
		sat = 10;
		sun = 8;
			System.out.println("희준의 근무시작일을 입력해주세요");
			startDayInput = sc.nextInt();
			if(startDayInput > 1) {
				endFind();
				 //시작날짜 반영
				startDayConcept();				
				startDayPayCalculate();
				result = mon_result + tue_result + wed_result+ thur_result + sat_result;
				for(int i = 0; i < 7 ; i++) {
					dayCount[i] = 0;
				} //배열값을 다시 초기화시켜줘야함.
			} else{
			payCalculate();
			result = mon_result + tue_result + wed_result+ thur_result + sat_result;
			}	
			discrimin();
	}
	public void Chae_young() {
		thur = 4;
		fri = 10;
			System.out.println("채영의 근무시작일을 입력해주세요");
			startDayInput = sc.nextInt();
			if(startDayInput > 1) {
				endFind();
				//근무시작날짜
				startDayConcept();
				startDayPayCalculate();
				result = thur_result+fri_result;
				for(int i = 0; i< 7 ; i++) {
					dayCount[i] = 0;
				} //배열값을 다시 초기화시켜줘야함.
			} else{
				payCalculate();
				result = thur_result + fri_result;
				}
			discrimin();
	}
	public void Jae_lim() {
		fri = 6;
		sat = 5;
		System.out.println("재림의 근무시작일을 입력해주세요");
		startDayInput = sc.nextInt();
		if(startDayInput > 1) {
			endFind();
			//근무시작날짜
			startDayConcept();
			startDayPayCalculate();
			result =fri_result+sat_result;
			for(int i = 0; i< 7 ; i++) {
				dayCount[i] = 0;
			} //배열값을 다시 초기화시켜줘야함.
		} else{
			payCalculate();
			result = fri_result+sat_result;
			}
		discrimin();
	}
	public void Su_yun() {
		sat = 6;
		sun = 8;
			System.out.println("수연의 근무시작일을 입력해주세요");
			startDayInput = sc.nextInt();
			if(startDayInput > 1) {
				endFind();
				//근무시작날짜
				startDayConcept();
				startDayPayCalculate();
				result = sat_result +sun_result;
				for(int i = 0; i< 7 ; i++) {
					dayCount[i] = 0;
				} //배열값을 다시 초기화시켜줘야함.
			} else{
				payCalculate();
				result = sat_result + sun_result;
				}
			discrimin();
	}
	public void Ga_eun() {
		mon = 3;
		tue = 3;
		wed = 4;
		thur = 4;
			System.out.println("가영의 근무시작일을 입력해주세요");
			startDayInput = sc.nextInt();
			if(startDayInput > 1) {
				endFind();
				//근무시작날자
				startDayConcept();
				startDayPayCalculate();
				result = mon_result+tue_result+wed_result+thur_result;
				for(int i=0; i< 7; i++) {
					dayCount[i] = 0;
				} //배열값을 다시 초기화시켜줘야함.
			}else{
			payCalculate();
			result = mon_result + tue_result + wed_result + thur_result;
			}
			discrimin();
	}
	public void Min_ji() {
		mon = 7;
		tue = 7;
			System.out.println("민지의 근무시작일을 입력해주세요");
			startDayInput = sc.nextInt();
			if(startDayInput > 1) {
				endFind();
				 //시작날짜 반영
				startDayConcept();
				startDayPayCalculate();
				result = mon_result + tue_result;
				for(int i = 0; i< 7 ; i++) {
					dayCount[i] = 0;
				} //배열값을 다시 초기화시켜줘야함.
			}else{
				payCalculate();
				result = mon_result+ tue_result;
				}
				discrimin();
	}
	public void Se_bin() {
	thur = 4;
	fri =4;
	sat = 3; 
		System.out.println("세빈의 근무시작일을 입력해주세요");
		startDayInput = sc.nextInt();
		if(startDayInput > 1) {
			endFind();
			startDayConcept();
			startDayPayCalculate();
			result = thur_result+fri_result+sat_result;
			for(int i = 0; i< 7 ; i++) {
				dayCount[i] = 0;
			} //배열값을 다시 초기화시켜줘야함.
		}else{
			payCalculate();
			result = thur_result + fri_result + sat_result;
			}
		discrimin();
	}
	public void Chae_eun() {
	wed = 7;
	thur =4; 
		System.out.println("채은의 근무시작일을 입력해주세요");
		startDayInput = sc.nextInt();
		if(startDayInput > 1) {
			endFind();
			startDayConcept();
			startDayPayCalculate();
			result = wed_result+ thur_result;
			for(int i = 0; i< 7; i++) {
				dayCount[i] = 0;
			} //배열값을 다시 초기화시켜줘야함.
		}else{
			payCalculate();
			result = wed_result+ thur_result;
			}
		discrimin();
	}
	public void De_ta() {//대타자
	}	
}

public class javapractice {
	public static void main(String[] args) {
		Worker c1 = new Worker();
		c1.input();
		c1.leapYear();
		c1.startFind();
		c1.endFind();
		c1.Jung_yun();
		c1.Hee_jun();
		c1.Chae_young();
		c1.Jae_lim();
		c1.Su_yun();
		c1.Ga_eun();
		c1.Min_ji();
		c1.Se_bin();
		c1.Chae_eun();	
			}
		}
	   	
